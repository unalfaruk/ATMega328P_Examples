
TIMER0_EX_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006df  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000240  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038a  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  9e:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
		}*/
	}
}

ISR (TIMER0_OVF_vect)  // timer0 overflow interrupt
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	overFlowCounter++;
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <updateLEDStatus>:
	/*if(*ptrOverFlowCounter>30){
		PORTB^=0b11111111;
		*ptrOverFlowCounter=0;
	}*/
	
	if(overFlowCounter>30){
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  cc:	8f 31       	cpi	r24, 0x1F	; 31
  ce:	28 f0       	brcs	.+10     	; 0xda <updateLEDStatus+0x12>
		PORTB^=0b11111111;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 95       	com	r24
  d4:	85 b9       	out	0x05, r24	; 5
		overFlowCounter=0;
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
  da:	08 95       	ret

000000dc <main>:
uint8_t * ptrOverFlowCounter=&overFlowCounter;
void updateLEDStatus();
int main(void)
{
	
	DDRB = 0b11111111; //Set Port B as output
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
	TCNT0=0b00000000; //Set the timer counter as zero
  e0:	16 bc       	out	0x26, r1	; 38
	TCCR0B=0b00000101; //Set the clock divider at 1/1024 Clock_Timer=7KHz
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	85 bd       	out	0x25, r24	; 37
	TCCR0A=0b00000000; //Set the compare output mode as normal
  e6:	14 bc       	out	0x24, r1	; 36
	TIMSK0=0b00000001;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	PORTB=0b00000000;
  ee:	15 b8       	out	0x05, r1	; 5
	sei();  
  f0:	78 94       	sei

	/* Replace with your application code */
	while (1)
	{
		updateLEDStatus();
  f2:	0e 94 64 00 	call	0xc8	; 0xc8 <updateLEDStatus>
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main+0x16>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
